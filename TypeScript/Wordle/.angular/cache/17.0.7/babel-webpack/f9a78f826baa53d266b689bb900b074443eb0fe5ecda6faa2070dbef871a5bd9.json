{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/drevo/Documents/GitHub/Crafts/TypeScript/Wordle/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport '../utils/click/isClickableInput.js';\nimport { writeDataTransferToClipboard } from '../utils/dataTransfer/Clipboard.js';\nimport '../utils/edit/isEditable.js';\nimport '../utils/edit/maxLength.js';\nimport '@testing-library/dom/dist/helpers.js';\nimport '../utils/keyDef/readNextDescriptor.js';\nimport '../utils/misc/level.js';\nimport '../options.js';\nimport { copySelection } from '../document/copySelection.js';\nfunction copy() {\n  return _copy.apply(this, arguments);\n}\nfunction _copy() {\n  _copy = _asyncToGenerator(function* () {\n    const doc = this.config.document;\n    var _doc_activeElement;\n    const target = (_doc_activeElement = doc.activeElement) !== null && _doc_activeElement !== void 0 ? _doc_activeElement : /* istanbul ignore next */doc.body;\n    const clipboardData = copySelection(target);\n    if (clipboardData.items.length === 0) {\n      return;\n    }\n    if (this.dispatchUIEvent(target, 'copy', {\n      clipboardData\n    }) && this.config.writeToClipboard) {\n      yield writeDataTransferToClipboard(doc, clipboardData);\n    }\n    return clipboardData;\n  });\n  return _copy.apply(this, arguments);\n}\nexport { copy };","map":{"version":3,"names":["writeDataTransferToClipboard","copySelection","copy","_copy","apply","arguments","_asyncToGenerator","doc","config","document","_doc_activeElement","target","activeElement","body","clipboardData","items","length","dispatchUIEvent","writeToClipboard"],"sources":["C:/Users/drevo/Documents/GitHub/Crafts/TypeScript/Wordle/node_modules/@testing-library/user-event/dist/esm/clipboard/copy.js"],"sourcesContent":["import '../utils/click/isClickableInput.js';\nimport { writeDataTransferToClipboard } from '../utils/dataTransfer/Clipboard.js';\nimport '../utils/edit/isEditable.js';\nimport '../utils/edit/maxLength.js';\nimport '@testing-library/dom/dist/helpers.js';\nimport '../utils/keyDef/readNextDescriptor.js';\nimport '../utils/misc/level.js';\nimport '../options.js';\nimport { copySelection } from '../document/copySelection.js';\n\nasync function copy() {\n    const doc = this.config.document;\n    var _doc_activeElement;\n    const target = (_doc_activeElement = doc.activeElement) !== null && _doc_activeElement !== void 0 ? _doc_activeElement : /* istanbul ignore next */ doc.body;\n    const clipboardData = copySelection(target);\n    if (clipboardData.items.length === 0) {\n        return;\n    }\n    if (this.dispatchUIEvent(target, 'copy', {\n        clipboardData\n    }) && this.config.writeToClipboard) {\n        await writeDataTransferToClipboard(doc, clipboardData);\n    }\n    return clipboardData;\n}\n\nexport { copy };\n"],"mappings":";AAAA,OAAO,oCAAoC;AAC3C,SAASA,4BAA4B,QAAQ,oCAAoC;AACjF,OAAO,6BAA6B;AACpC,OAAO,4BAA4B;AACnC,OAAO,sCAAsC;AAC7C,OAAO,uCAAuC;AAC9C,OAAO,wBAAwB;AAC/B,OAAO,eAAe;AACtB,SAASC,aAAa,QAAQ,8BAA8B;AAAC,SAE9CC,IAAIA,CAAA;EAAA,OAAAC,KAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,MAAA;EAAAA,KAAA,GAAAG,iBAAA,CAAnB,aAAsB;IAClB,MAAMC,GAAG,GAAG,IAAI,CAACC,MAAM,CAACC,QAAQ;IAChC,IAAIC,kBAAkB;IACtB,MAAMC,MAAM,GAAG,CAACD,kBAAkB,GAAGH,GAAG,CAACK,aAAa,MAAM,IAAI,IAAIF,kBAAkB,KAAK,KAAK,CAAC,GAAGA,kBAAkB,GAAG,0BAA2BH,GAAG,CAACM,IAAI;IAC5J,MAAMC,aAAa,GAAGb,aAAa,CAACU,MAAM,CAAC;IAC3C,IAAIG,aAAa,CAACC,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;MAClC;IACJ;IACA,IAAI,IAAI,CAACC,eAAe,CAACN,MAAM,EAAE,MAAM,EAAE;MACrCG;IACJ,CAAC,CAAC,IAAI,IAAI,CAACN,MAAM,CAACU,gBAAgB,EAAE;MAChC,MAAMlB,4BAA4B,CAACO,GAAG,EAAEO,aAAa,CAAC;IAC1D;IACA,OAAOA,aAAa;EACxB,CAAC;EAAA,OAAAX,KAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAED,SAASH,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}