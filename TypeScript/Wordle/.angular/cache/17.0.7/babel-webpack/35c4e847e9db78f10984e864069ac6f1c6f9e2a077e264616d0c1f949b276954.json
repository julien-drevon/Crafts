{"ast":null,"code":"import { getUIValue, getUISelection } from '../../document/UI.js';\nimport '../../utils/click/isClickableInput.js';\nimport '../../utils/dataTransfer/Clipboard.js';\nimport { getContentEditable } from '../../utils/edit/isContentEditable.js';\nimport '../../utils/edit/isEditable.js';\nimport '../../utils/edit/maxLength.js';\nimport '@testing-library/dom/dist/helpers.js';\nimport { hasOwnSelection } from '../../utils/focus/selection.js';\nimport '../../utils/keyDef/readNextDescriptor.js';\nimport '../../utils/misc/level.js';\nimport '../../options.js';\nimport { setSelection } from './setSelection.js';\n\n/**\n * Expand a selection like the browser does when pressing Ctrl+A.\n */\nfunction selectAll(target) {\n  if (hasOwnSelection(target)) {\n    return setSelection({\n      focusNode: target,\n      anchorOffset: 0,\n      focusOffset: getUIValue(target).length\n    });\n  }\n  var _getContentEditable;\n  const focusNode = (_getContentEditable = getContentEditable(target)) !== null && _getContentEditable !== void 0 ? _getContentEditable : target.ownerDocument.body;\n  setSelection({\n    focusNode,\n    anchorOffset: 0,\n    focusOffset: focusNode.childNodes.length\n  });\n}\nfunction isAllSelected(target) {\n  if (hasOwnSelection(target)) {\n    return getUISelection(target).startOffset === 0 && getUISelection(target).endOffset === getUIValue(target).length;\n  }\n  var _getContentEditable;\n  const focusNode = (_getContentEditable = getContentEditable(target)) !== null && _getContentEditable !== void 0 ? _getContentEditable : target.ownerDocument.body;\n  const selection = target.ownerDocument.getSelection();\n  return (selection === null || selection === void 0 ? void 0 : selection.anchorNode) === focusNode && selection.focusNode === focusNode && selection.anchorOffset === 0 && selection.focusOffset === focusNode.childNodes.length;\n}\nexport { isAllSelected, selectAll };","map":{"version":3,"names":["getUIValue","getUISelection","getContentEditable","hasOwnSelection","setSelection","selectAll","target","focusNode","anchorOffset","focusOffset","length","_getContentEditable","ownerDocument","body","childNodes","isAllSelected","startOffset","endOffset","selection","getSelection","anchorNode"],"sources":["C:/Users/drevo/Documents/GitHub/Crafts/TypeScript/Storybook/node_modules/@testing-library/user-event/dist/esm/event/selection/selectAll.js"],"sourcesContent":["import { getUIValue, getUISelection } from '../../document/UI.js';\nimport '../../utils/click/isClickableInput.js';\nimport '../../utils/dataTransfer/Clipboard.js';\nimport { getContentEditable } from '../../utils/edit/isContentEditable.js';\nimport '../../utils/edit/isEditable.js';\nimport '../../utils/edit/maxLength.js';\nimport '@testing-library/dom/dist/helpers.js';\nimport { hasOwnSelection } from '../../utils/focus/selection.js';\nimport '../../utils/keyDef/readNextDescriptor.js';\nimport '../../utils/misc/level.js';\nimport '../../options.js';\nimport { setSelection } from './setSelection.js';\n\n/**\n * Expand a selection like the browser does when pressing Ctrl+A.\n */ function selectAll(target) {\n    if (hasOwnSelection(target)) {\n        return setSelection({\n            focusNode: target,\n            anchorOffset: 0,\n            focusOffset: getUIValue(target).length\n        });\n    }\n    var _getContentEditable;\n    const focusNode = (_getContentEditable = getContentEditable(target)) !== null && _getContentEditable !== void 0 ? _getContentEditable : target.ownerDocument.body;\n    setSelection({\n        focusNode,\n        anchorOffset: 0,\n        focusOffset: focusNode.childNodes.length\n    });\n}\nfunction isAllSelected(target) {\n    if (hasOwnSelection(target)) {\n        return getUISelection(target).startOffset === 0 && getUISelection(target).endOffset === getUIValue(target).length;\n    }\n    var _getContentEditable;\n    const focusNode = (_getContentEditable = getContentEditable(target)) !== null && _getContentEditable !== void 0 ? _getContentEditable : target.ownerDocument.body;\n    const selection = target.ownerDocument.getSelection();\n    return (selection === null || selection === void 0 ? void 0 : selection.anchorNode) === focusNode && selection.focusNode === focusNode && selection.anchorOffset === 0 && selection.focusOffset === focusNode.childNodes.length;\n}\n\nexport { isAllSelected, selectAll };\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,cAAc,QAAQ,sBAAsB;AACjE,OAAO,uCAAuC;AAC9C,OAAO,uCAAuC;AAC9C,SAASC,kBAAkB,QAAQ,uCAAuC;AAC1E,OAAO,gCAAgC;AACvC,OAAO,+BAA+B;AACtC,OAAO,sCAAsC;AAC7C,SAASC,eAAe,QAAQ,gCAAgC;AAChE,OAAO,0CAA0C;AACjD,OAAO,2BAA2B;AAClC,OAAO,kBAAkB;AACzB,SAASC,YAAY,QAAQ,mBAAmB;;AAEhD;AACA;AACA;AAAI,SAASC,SAASA,CAACC,MAAM,EAAE;EAC3B,IAAIH,eAAe,CAACG,MAAM,CAAC,EAAE;IACzB,OAAOF,YAAY,CAAC;MAChBG,SAAS,EAAED,MAAM;MACjBE,YAAY,EAAE,CAAC;MACfC,WAAW,EAAET,UAAU,CAACM,MAAM,CAAC,CAACI;IACpC,CAAC,CAAC;EACN;EACA,IAAIC,mBAAmB;EACvB,MAAMJ,SAAS,GAAG,CAACI,mBAAmB,GAAGT,kBAAkB,CAACI,MAAM,CAAC,MAAM,IAAI,IAAIK,mBAAmB,KAAK,KAAK,CAAC,GAAGA,mBAAmB,GAAGL,MAAM,CAACM,aAAa,CAACC,IAAI;EACjKT,YAAY,CAAC;IACTG,SAAS;IACTC,YAAY,EAAE,CAAC;IACfC,WAAW,EAAEF,SAAS,CAACO,UAAU,CAACJ;EACtC,CAAC,CAAC;AACN;AACA,SAASK,aAAaA,CAACT,MAAM,EAAE;EAC3B,IAAIH,eAAe,CAACG,MAAM,CAAC,EAAE;IACzB,OAAOL,cAAc,CAACK,MAAM,CAAC,CAACU,WAAW,KAAK,CAAC,IAAIf,cAAc,CAACK,MAAM,CAAC,CAACW,SAAS,KAAKjB,UAAU,CAACM,MAAM,CAAC,CAACI,MAAM;EACrH;EACA,IAAIC,mBAAmB;EACvB,MAAMJ,SAAS,GAAG,CAACI,mBAAmB,GAAGT,kBAAkB,CAACI,MAAM,CAAC,MAAM,IAAI,IAAIK,mBAAmB,KAAK,KAAK,CAAC,GAAGA,mBAAmB,GAAGL,MAAM,CAACM,aAAa,CAACC,IAAI;EACjK,MAAMK,SAAS,GAAGZ,MAAM,CAACM,aAAa,CAACO,YAAY,CAAC,CAAC;EACrD,OAAO,CAACD,SAAS,KAAK,IAAI,IAAIA,SAAS,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,SAAS,CAACE,UAAU,MAAMb,SAAS,IAAIW,SAAS,CAACX,SAAS,KAAKA,SAAS,IAAIW,SAAS,CAACV,YAAY,KAAK,CAAC,IAAIU,SAAS,CAACT,WAAW,KAAKF,SAAS,CAACO,UAAU,CAACJ,MAAM;AACnO;AAEA,SAASK,aAAa,EAAEV,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}