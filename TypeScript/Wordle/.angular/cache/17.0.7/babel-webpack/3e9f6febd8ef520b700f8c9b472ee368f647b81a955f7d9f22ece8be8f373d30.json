{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/drevo/Documents/GitHub/Crafts/TypeScript/Storybook/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport '../utils/click/isClickableInput.js';\nimport '../utils/dataTransfer/Clipboard.js';\nimport '../utils/edit/isEditable.js';\nimport '../utils/edit/maxLength.js';\nimport '@testing-library/dom/dist/helpers.js';\nimport '../utils/keyDef/readNextDescriptor.js';\nimport '../utils/misc/level.js';\nimport { wait } from '../utils/misc/wait.js';\nimport '../options.js';\nimport { parseKeyDef } from './parseKeyDef.js';\nfunction keyboard(_x) {\n  return _keyboard.apply(this, arguments);\n}\nfunction _keyboard() {\n  _keyboard = _asyncToGenerator(function* (text) {\n    const actions = parseKeyDef(this.config.keyboardMap, text);\n    for (let i = 0; i < actions.length; i++) {\n      yield wait(this.config);\n      yield keyboardAction(this, actions[i]);\n    }\n  });\n  return _keyboard.apply(this, arguments);\n}\nfunction keyboardAction(_x2, _x3) {\n  return _keyboardAction.apply(this, arguments);\n}\nfunction _keyboardAction() {\n  _keyboardAction = _asyncToGenerator(function* (instance, {\n    keyDef,\n    releasePrevious,\n    releaseSelf,\n    repeat\n  }) {\n    const {\n      system\n    } = instance;\n    // Release the key automatically if it was pressed before.\n    if (system.keyboard.isKeyPressed(keyDef)) {\n      yield system.keyboard.keyup(instance, keyDef);\n    }\n    if (!releasePrevious) {\n      for (let i = 1; i <= repeat; i++) {\n        yield system.keyboard.keydown(instance, keyDef);\n        if (i < repeat) {\n          yield wait(instance.config);\n        }\n      }\n      // Release the key only on the last iteration on `state.repeatKey`.\n      if (releaseSelf) {\n        yield system.keyboard.keyup(instance, keyDef);\n      }\n    }\n  });\n  return _keyboardAction.apply(this, arguments);\n}\nfunction releaseAllKeys(_x4) {\n  return _releaseAllKeys.apply(this, arguments);\n}\nfunction _releaseAllKeys() {\n  _releaseAllKeys = _asyncToGenerator(function* (instance) {\n    for (const k of instance.system.keyboard.getPressedKeys()) {\n      yield instance.system.keyboard.keyup(instance, k);\n    }\n  });\n  return _releaseAllKeys.apply(this, arguments);\n}\nexport { keyboard, releaseAllKeys };","map":{"version":3,"names":["wait","parseKeyDef","keyboard","_x","_keyboard","apply","arguments","_asyncToGenerator","text","actions","config","keyboardMap","i","length","keyboardAction","_x2","_x3","_keyboardAction","instance","keyDef","releasePrevious","releaseSelf","repeat","system","isKeyPressed","keyup","keydown","releaseAllKeys","_x4","_releaseAllKeys","k","getPressedKeys"],"sources":["C:/Users/drevo/Documents/GitHub/Crafts/TypeScript/Storybook/node_modules/@testing-library/user-event/dist/esm/keyboard/index.js"],"sourcesContent":["import '../utils/click/isClickableInput.js';\nimport '../utils/dataTransfer/Clipboard.js';\nimport '../utils/edit/isEditable.js';\nimport '../utils/edit/maxLength.js';\nimport '@testing-library/dom/dist/helpers.js';\nimport '../utils/keyDef/readNextDescriptor.js';\nimport '../utils/misc/level.js';\nimport { wait } from '../utils/misc/wait.js';\nimport '../options.js';\nimport { parseKeyDef } from './parseKeyDef.js';\n\nasync function keyboard(text) {\n    const actions = parseKeyDef(this.config.keyboardMap, text);\n    for(let i = 0; i < actions.length; i++){\n        await wait(this.config);\n        await keyboardAction(this, actions[i]);\n    }\n}\nasync function keyboardAction(instance, { keyDef, releasePrevious, releaseSelf, repeat }) {\n    const { system } = instance;\n    // Release the key automatically if it was pressed before.\n    if (system.keyboard.isKeyPressed(keyDef)) {\n        await system.keyboard.keyup(instance, keyDef);\n    }\n    if (!releasePrevious) {\n        for(let i = 1; i <= repeat; i++){\n            await system.keyboard.keydown(instance, keyDef);\n            if (i < repeat) {\n                await wait(instance.config);\n            }\n        }\n        // Release the key only on the last iteration on `state.repeatKey`.\n        if (releaseSelf) {\n            await system.keyboard.keyup(instance, keyDef);\n        }\n    }\n}\nasync function releaseAllKeys(instance) {\n    for (const k of instance.system.keyboard.getPressedKeys()){\n        await instance.system.keyboard.keyup(instance, k);\n    }\n}\n\nexport { keyboard, releaseAllKeys };\n"],"mappings":";AAAA,OAAO,oCAAoC;AAC3C,OAAO,oCAAoC;AAC3C,OAAO,6BAA6B;AACpC,OAAO,4BAA4B;AACnC,OAAO,sCAAsC;AAC7C,OAAO,uCAAuC;AAC9C,OAAO,wBAAwB;AAC/B,SAASA,IAAI,QAAQ,uBAAuB;AAC5C,OAAO,eAAe;AACtB,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAEhCC,QAAQA,CAAAC,EAAA;EAAA,OAAAC,SAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,UAAA;EAAAA,SAAA,GAAAG,iBAAA,CAAvB,WAAwBC,IAAI,EAAE;IAC1B,MAAMC,OAAO,GAAGR,WAAW,CAAC,IAAI,CAACS,MAAM,CAACC,WAAW,EAAEH,IAAI,CAAC;IAC1D,KAAI,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,OAAO,CAACI,MAAM,EAAED,CAAC,EAAE,EAAC;MACnC,MAAMZ,IAAI,CAAC,IAAI,CAACU,MAAM,CAAC;MACvB,MAAMI,cAAc,CAAC,IAAI,EAAEL,OAAO,CAACG,CAAC,CAAC,CAAC;IAC1C;EACJ,CAAC;EAAA,OAAAR,SAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SACcQ,cAAcA,CAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,eAAA,CAAAZ,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAW,gBAAA;EAAAA,eAAA,GAAAV,iBAAA,CAA7B,WAA8BW,QAAQ,EAAE;IAAEC,MAAM;IAAEC,eAAe;IAAEC,WAAW;IAAEC;EAAO,CAAC,EAAE;IACtF,MAAM;MAAEC;IAAO,CAAC,GAAGL,QAAQ;IAC3B;IACA,IAAIK,MAAM,CAACrB,QAAQ,CAACsB,YAAY,CAACL,MAAM,CAAC,EAAE;MACtC,MAAMI,MAAM,CAACrB,QAAQ,CAACuB,KAAK,CAACP,QAAQ,EAAEC,MAAM,CAAC;IACjD;IACA,IAAI,CAACC,eAAe,EAAE;MAClB,KAAI,IAAIR,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIU,MAAM,EAAEV,CAAC,EAAE,EAAC;QAC5B,MAAMW,MAAM,CAACrB,QAAQ,CAACwB,OAAO,CAACR,QAAQ,EAAEC,MAAM,CAAC;QAC/C,IAAIP,CAAC,GAAGU,MAAM,EAAE;UACZ,MAAMtB,IAAI,CAACkB,QAAQ,CAACR,MAAM,CAAC;QAC/B;MACJ;MACA;MACA,IAAIW,WAAW,EAAE;QACb,MAAME,MAAM,CAACrB,QAAQ,CAACuB,KAAK,CAACP,QAAQ,EAAEC,MAAM,CAAC;MACjD;IACJ;EACJ,CAAC;EAAA,OAAAF,eAAA,CAAAZ,KAAA,OAAAC,SAAA;AAAA;AAAA,SACcqB,cAAcA,CAAAC,GAAA;EAAA,OAAAC,eAAA,CAAAxB,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAuB,gBAAA;EAAAA,eAAA,GAAAtB,iBAAA,CAA7B,WAA8BW,QAAQ,EAAE;IACpC,KAAK,MAAMY,CAAC,IAAIZ,QAAQ,CAACK,MAAM,CAACrB,QAAQ,CAAC6B,cAAc,CAAC,CAAC,EAAC;MACtD,MAAMb,QAAQ,CAACK,MAAM,CAACrB,QAAQ,CAACuB,KAAK,CAACP,QAAQ,EAAEY,CAAC,CAAC;IACrD;EACJ,CAAC;EAAA,OAAAD,eAAA,CAAAxB,KAAA,OAAAC,SAAA;AAAA;AAED,SAASJ,QAAQ,EAAEyB,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}