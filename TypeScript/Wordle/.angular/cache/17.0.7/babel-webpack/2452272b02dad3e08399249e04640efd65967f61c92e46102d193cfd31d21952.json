{"ast":null,"code":"import { setUISelection } from '../../document/UI.js';\nimport '../../utils/click/isClickableInput.js';\nimport '../../utils/dataTransfer/Clipboard.js';\nimport '../../utils/edit/isEditable.js';\nimport '../../utils/edit/maxLength.js';\nimport '@testing-library/dom/dist/helpers.js';\nimport '../../utils/keyDef/readNextDescriptor.js';\nimport '../../utils/misc/level.js';\nimport '../../options.js';\nimport { getTargetTypeAndSelection } from './getTargetTypeAndSelection.js';\n\n/**\n * Set the selection\n */\nfunction setSelection({\n  focusNode,\n  focusOffset,\n  anchorNode = focusNode,\n  anchorOffset = focusOffset\n}) {\n  var _anchorNode_ownerDocument_getSelection, _anchorNode_ownerDocument;\n  const typeAndSelection = getTargetTypeAndSelection(focusNode);\n  if (typeAndSelection.type === 'input') {\n    return setUISelection(focusNode, {\n      anchorOffset,\n      focusOffset\n    });\n  }\n  (_anchorNode_ownerDocument = anchorNode.ownerDocument) === null || _anchorNode_ownerDocument === void 0 ? void 0 : (_anchorNode_ownerDocument_getSelection = _anchorNode_ownerDocument.getSelection()) === null || _anchorNode_ownerDocument_getSelection === void 0 ? void 0 : _anchorNode_ownerDocument_getSelection.setBaseAndExtent(anchorNode, anchorOffset, focusNode, focusOffset);\n}\nexport { setSelection };","map":{"version":3,"names":["setUISelection","getTargetTypeAndSelection","setSelection","focusNode","focusOffset","anchorNode","anchorOffset","_anchorNode_ownerDocument_getSelection","_anchorNode_ownerDocument","typeAndSelection","type","ownerDocument","getSelection","setBaseAndExtent"],"sources":["C:/Users/drevo/Documents/GitHub/Crafts/TypeScript/Storybook/node_modules/@testing-library/user-event/dist/esm/event/selection/setSelection.js"],"sourcesContent":["import { setUISelection } from '../../document/UI.js';\nimport '../../utils/click/isClickableInput.js';\nimport '../../utils/dataTransfer/Clipboard.js';\nimport '../../utils/edit/isEditable.js';\nimport '../../utils/edit/maxLength.js';\nimport '@testing-library/dom/dist/helpers.js';\nimport '../../utils/keyDef/readNextDescriptor.js';\nimport '../../utils/misc/level.js';\nimport '../../options.js';\nimport { getTargetTypeAndSelection } from './getTargetTypeAndSelection.js';\n\n/**\n * Set the selection\n */ function setSelection({ focusNode, focusOffset, anchorNode = focusNode, anchorOffset = focusOffset }) {\n    var _anchorNode_ownerDocument_getSelection, _anchorNode_ownerDocument;\n    const typeAndSelection = getTargetTypeAndSelection(focusNode);\n    if (typeAndSelection.type === 'input') {\n        return setUISelection(focusNode, {\n            anchorOffset,\n            focusOffset\n        });\n    }\n    (_anchorNode_ownerDocument = anchorNode.ownerDocument) === null || _anchorNode_ownerDocument === void 0 ? void 0 : (_anchorNode_ownerDocument_getSelection = _anchorNode_ownerDocument.getSelection()) === null || _anchorNode_ownerDocument_getSelection === void 0 ? void 0 : _anchorNode_ownerDocument_getSelection.setBaseAndExtent(anchorNode, anchorOffset, focusNode, focusOffset);\n}\n\nexport { setSelection };\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,sBAAsB;AACrD,OAAO,uCAAuC;AAC9C,OAAO,uCAAuC;AAC9C,OAAO,gCAAgC;AACvC,OAAO,+BAA+B;AACtC,OAAO,sCAAsC;AAC7C,OAAO,0CAA0C;AACjD,OAAO,2BAA2B;AAClC,OAAO,kBAAkB;AACzB,SAASC,yBAAyB,QAAQ,gCAAgC;;AAE1E;AACA;AACA;AAAI,SAASC,YAAYA,CAAC;EAAEC,SAAS;EAAEC,WAAW;EAAEC,UAAU,GAAGF,SAAS;EAAEG,YAAY,GAAGF;AAAY,CAAC,EAAE;EACtG,IAAIG,sCAAsC,EAAEC,yBAAyB;EACrE,MAAMC,gBAAgB,GAAGR,yBAAyB,CAACE,SAAS,CAAC;EAC7D,IAAIM,gBAAgB,CAACC,IAAI,KAAK,OAAO,EAAE;IACnC,OAAOV,cAAc,CAACG,SAAS,EAAE;MAC7BG,YAAY;MACZF;IACJ,CAAC,CAAC;EACN;EACA,CAACI,yBAAyB,GAAGH,UAAU,CAACM,aAAa,MAAM,IAAI,IAAIH,yBAAyB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,CAACD,sCAAsC,GAAGC,yBAAyB,CAACI,YAAY,CAAC,CAAC,MAAM,IAAI,IAAIL,sCAAsC,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,sCAAsC,CAACM,gBAAgB,CAACR,UAAU,EAAEC,YAAY,EAAEH,SAAS,EAAEC,WAAW,CAAC;AAC7X;AAEA,SAASF,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}