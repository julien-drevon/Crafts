{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.spyOn = exports.mocked = exports.fn = exports.ModuleMocker = void 0;\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* eslint-disable local/ban-types-eventually, local/prefer-rest-params-eventually */\n\n/**\n * Possible types of a MockFunctionResult.\n * 'return': The call completed by returning normally.\n * 'throw': The call completed by throwing a value.\n * 'incomplete': The call has not completed yet. This is possible if you read\n *               the  mock function result from within the mock function itself\n *               (or a function called by the mock function).\n */\n\n/**\n * Represents the result of a single call to a mock function.\n */\n// see https://github.com/Microsoft/TypeScript/issues/25215\nconst MOCK_CONSTRUCTOR_NAME = 'mockConstructor';\nconst FUNCTION_NAME_RESERVED_PATTERN = /[\\s!-\\/:-@\\[-`{-~]/;\nconst FUNCTION_NAME_RESERVED_REPLACE = new RegExp(FUNCTION_NAME_RESERVED_PATTERN.source, 'g');\nconst RESERVED_KEYWORDS = new Set(['arguments', 'await', 'break', 'case', 'catch', 'class', 'const', 'continue', 'debugger', 'default', 'delete', 'do', 'else', 'enum', 'eval', 'export', 'extends', 'false', 'finally', 'for', 'function', 'if', 'implements', 'import', 'in', 'instanceof', 'interface', 'let', 'new', 'null', 'package', 'private', 'protected', 'public', 'return', 'static', 'super', 'switch', 'this', 'throw', 'true', 'try', 'typeof', 'var', 'void', 'while', 'with', 'yield']);\nfunction matchArity(fn, length) {\n  let mockConstructor;\n  switch (length) {\n    case 1:\n      mockConstructor = function (_a) {\n        return fn.apply(this, arguments);\n      };\n      break;\n    case 2:\n      mockConstructor = function (_a, _b) {\n        return fn.apply(this, arguments);\n      };\n      break;\n    case 3:\n      mockConstructor = function (_a, _b, _c) {\n        return fn.apply(this, arguments);\n      };\n      break;\n    case 4:\n      mockConstructor = function (_a, _b, _c, _d) {\n        return fn.apply(this, arguments);\n      };\n      break;\n    case 5:\n      mockConstructor = function (_a, _b, _c, _d, _e) {\n        return fn.apply(this, arguments);\n      };\n      break;\n    case 6:\n      mockConstructor = function (_a, _b, _c, _d, _e, _f) {\n        return fn.apply(this, arguments);\n      };\n      break;\n    case 7:\n      mockConstructor = function (_a, _b, _c, _d, _e, _f, _g) {\n        return fn.apply(this, arguments);\n      };\n      break;\n    case 8:\n      mockConstructor = function (_a, _b, _c, _d, _e, _f, _g, _h) {\n        return fn.apply(this, arguments);\n      };\n      break;\n    case 9:\n      mockConstructor = function (_a, _b, _c, _d, _e, _f, _g, _h, _i) {\n        return fn.apply(this, arguments);\n      };\n      break;\n    default:\n      mockConstructor = function () {\n        return fn.apply(this, arguments);\n      };\n      break;\n  }\n  return mockConstructor;\n}\nfunction getObjectType(value) {\n  return Object.prototype.toString.apply(value).slice(8, -1);\n}\nfunction getType(ref) {\n  const typeName = getObjectType(ref);\n  if (typeName === 'Function' || typeName === 'AsyncFunction' || typeName === 'GeneratorFunction') {\n    return 'function';\n  } else if (Array.isArray(ref)) {\n    return 'array';\n  } else if (typeName === 'Object') {\n    return 'object';\n  } else if (typeName === 'Number' || typeName === 'String' || typeName === 'Boolean' || typeName === 'Symbol') {\n    return 'constant';\n  } else if (typeName === 'Map' || typeName === 'WeakMap' || typeName === 'Set') {\n    return 'collection';\n  } else if (typeName === 'RegExp') {\n    return 'regexp';\n  } else if (ref === undefined) {\n    return 'undefined';\n  } else if (ref === null) {\n    return 'null';\n  } else {\n    return null;\n  }\n}\nfunction isReadonlyProp(object, prop) {\n  if (prop === 'arguments' || prop === 'caller' || prop === 'callee' || prop === 'name' || prop === 'length') {\n    const typeName = getObjectType(object);\n    return typeName === 'Function' || typeName === 'AsyncFunction' || typeName === 'GeneratorFunction';\n  }\n  if (prop === 'source' || prop === 'global' || prop === 'ignoreCase' || prop === 'multiline') {\n    return getObjectType(object) === 'RegExp';\n  }\n  return false;\n}\nclass ModuleMocker {\n  /**\n   * @see README.md\n   * @param global Global object of the test environment, used to create\n   * mocks\n   */\n  constructor(global) {\n    _defineProperty(this, '_environmentGlobal', void 0);\n    _defineProperty(this, '_mockState', void 0);\n    _defineProperty(this, '_mockConfigRegistry', void 0);\n    _defineProperty(this, '_spyState', void 0);\n    _defineProperty(this, '_invocationCallCounter', void 0);\n    this._environmentGlobal = global;\n    this._mockState = new WeakMap();\n    this._mockConfigRegistry = new WeakMap();\n    this._spyState = new Set();\n    this._invocationCallCounter = 1;\n  }\n  _getSlots(object) {\n    if (!object) {\n      return [];\n    }\n    const slots = new Set();\n    const EnvObjectProto = this._environmentGlobal.Object.prototype;\n    const EnvFunctionProto = this._environmentGlobal.Function.prototype;\n    const EnvRegExpProto = this._environmentGlobal.RegExp.prototype; // Also check the builtins in the current context as they leak through\n    // core node modules.\n\n    const ObjectProto = Object.prototype;\n    const FunctionProto = Function.prototype;\n    const RegExpProto = RegExp.prototype; // Properties of Object.prototype, Function.prototype and RegExp.prototype\n    // are never reported as slots\n\n    while (object != null && object !== EnvObjectProto && object !== EnvFunctionProto && object !== EnvRegExpProto && object !== ObjectProto && object !== FunctionProto && object !== RegExpProto) {\n      const ownNames = Object.getOwnPropertyNames(object);\n      for (let i = 0; i < ownNames.length; i++) {\n        const prop = ownNames[i];\n        if (!isReadonlyProp(object, prop)) {\n          const propDesc = Object.getOwnPropertyDescriptor(object, prop);\n          if (propDesc !== undefined && !propDesc.get || object.__esModule) {\n            slots.add(prop);\n          }\n        }\n      }\n      object = Object.getPrototypeOf(object);\n    }\n    return Array.from(slots);\n  }\n  _ensureMockConfig(f) {\n    let config = this._mockConfigRegistry.get(f);\n    if (!config) {\n      config = this._defaultMockConfig();\n      this._mockConfigRegistry.set(f, config);\n    }\n    return config;\n  }\n  _ensureMockState(f) {\n    let state = this._mockState.get(f);\n    if (!state) {\n      state = this._defaultMockState();\n      this._mockState.set(f, state);\n    }\n    if (state.calls.length > 0) {\n      state.lastCall = state.calls[state.calls.length - 1];\n    }\n    return state;\n  }\n  _defaultMockConfig() {\n    return {\n      mockImpl: undefined,\n      mockName: 'jest.fn()',\n      specificMockImpls: [],\n      specificReturnValues: []\n    };\n  }\n  _defaultMockState() {\n    return {\n      calls: [],\n      instances: [],\n      invocationCallOrder: [],\n      results: []\n    };\n  }\n  _makeComponent(metadata, restore) {\n    if (metadata.type === 'object') {\n      return new this._environmentGlobal.Object();\n    } else if (metadata.type === 'array') {\n      return new this._environmentGlobal.Array();\n    } else if (metadata.type === 'regexp') {\n      return new this._environmentGlobal.RegExp('');\n    } else if (metadata.type === 'constant' || metadata.type === 'collection' || metadata.type === 'null' || metadata.type === 'undefined') {\n      return metadata.value;\n    } else if (metadata.type === 'function') {\n      const prototype = metadata.members && metadata.members.prototype && metadata.members.prototype.members || {};\n      const prototypeSlots = this._getSlots(prototype);\n      const mocker = this;\n      const mockConstructor = matchArity(function (...args) {\n        const mockState = mocker._ensureMockState(f);\n        const mockConfig = mocker._ensureMockConfig(f);\n        mockState.instances.push(this);\n        mockState.calls.push(args); // Create and record an \"incomplete\" mock result immediately upon\n        // calling rather than waiting for the mock to return. This avoids\n        // issues caused by recursion where results can be recorded in the\n        // wrong order.\n\n        const mockResult = {\n          type: 'incomplete',\n          value: undefined\n        };\n        mockState.results.push(mockResult);\n        mockState.invocationCallOrder.push(mocker._invocationCallCounter++); // Will be set to the return value of the mock if an error is not thrown\n\n        let finalReturnValue; // Will be set to the error that is thrown by the mock (if it throws)\n\n        let thrownError; // Will be set to true if the mock throws an error. The presence of a\n        // value in `thrownError` is not a 100% reliable indicator because a\n        // function could throw a value of undefined.\n\n        let callDidThrowError = false;\n        try {\n          // The bulk of the implementation is wrapped in an immediately\n          // executed arrow function so the return value of the mock function\n          // can be easily captured and recorded, despite the many separate\n          // return points within the logic.\n          finalReturnValue = (() => {\n            if (this instanceof f) {\n              // This is probably being called as a constructor\n              prototypeSlots.forEach(slot => {\n                // Copy prototype methods to the instance to make\n                // it easier to interact with mock instance call and\n                // return values\n                if (prototype[slot].type === 'function') {\n                  // @ts-expect-error no index signature\n                  const protoImpl = this[slot]; // @ts-expect-error no index signature\n\n                  this[slot] = mocker.generateFromMetadata(prototype[slot]); // @ts-expect-error no index signature\n\n                  this[slot]._protoImpl = protoImpl;\n                }\n              }); // Run the mock constructor implementation\n\n              const mockImpl = mockConfig.specificMockImpls.length ? mockConfig.specificMockImpls.shift() : mockConfig.mockImpl;\n              return mockImpl && mockImpl.apply(this, arguments);\n            } // If mockImplementationOnce()/mockImplementation() is last set,\n            // implementation use the mock\n\n            let specificMockImpl = mockConfig.specificMockImpls.shift();\n            if (specificMockImpl === undefined) {\n              specificMockImpl = mockConfig.mockImpl;\n            }\n            if (specificMockImpl) {\n              return specificMockImpl.apply(this, arguments);\n            } // Otherwise use prototype implementation\n\n            if (f._protoImpl) {\n              return f._protoImpl.apply(this, arguments);\n            }\n            return undefined;\n          })();\n        } catch (error) {\n          // Store the thrown error so we can record it, then re-throw it.\n          thrownError = error;\n          callDidThrowError = true;\n          throw error;\n        } finally {\n          // Record the result of the function.\n          // NOTE: Intentionally NOT pushing/indexing into the array of mock\n          //       results here to avoid corrupting results data if mockClear()\n          //       is called during the execution of the mock.\n          mockResult.type = callDidThrowError ? 'throw' : 'return';\n          mockResult.value = callDidThrowError ? thrownError : finalReturnValue;\n        }\n        return finalReturnValue;\n      }, metadata.length || 0);\n      const f = this._createMockFunction(metadata, mockConstructor);\n      f._isMockFunction = true;\n      f.getMockImplementation = () => this._ensureMockConfig(f).mockImpl;\n      if (typeof restore === 'function') {\n        this._spyState.add(restore);\n      }\n      this._mockState.set(f, this._defaultMockState());\n      this._mockConfigRegistry.set(f, this._defaultMockConfig());\n      Object.defineProperty(f, 'mock', {\n        configurable: false,\n        enumerable: true,\n        get: () => this._ensureMockState(f),\n        set: val => this._mockState.set(f, val)\n      });\n      f.mockClear = () => {\n        this._mockState.delete(f);\n        return f;\n      };\n      f.mockReset = () => {\n        f.mockClear();\n        this._mockConfigRegistry.delete(f);\n        return f;\n      };\n      f.mockRestore = () => {\n        f.mockReset();\n        return restore ? restore() : undefined;\n      };\n      f.mockReturnValueOnce = (value // next function call will return this value or default return value\n      ) => f.mockImplementationOnce(() => value);\n      f.mockResolvedValueOnce = value => f.mockImplementationOnce(() => Promise.resolve(value));\n      f.mockRejectedValueOnce = value => f.mockImplementationOnce(() => Promise.reject(value));\n      f.mockReturnValue = (value // next function call will return specified return value or this one\n      ) => f.mockImplementation(() => value);\n      f.mockResolvedValue = value => f.mockImplementation(() => Promise.resolve(value));\n      f.mockRejectedValue = value => f.mockImplementation(() => Promise.reject(value));\n      f.mockImplementationOnce = fn => {\n        // next function call will use this mock implementation return value\n        // or default mock implementation return value\n        const mockConfig = this._ensureMockConfig(f);\n        mockConfig.specificMockImpls.push(fn);\n        return f;\n      };\n      f.mockImplementation = fn => {\n        // next function call will use mock implementation return value\n        const mockConfig = this._ensureMockConfig(f);\n        mockConfig.mockImpl = fn;\n        return f;\n      };\n      f.mockReturnThis = () => f.mockImplementation(function () {\n        return this;\n      });\n      f.mockName = name => {\n        if (name) {\n          const mockConfig = this._ensureMockConfig(f);\n          mockConfig.mockName = name;\n        }\n        return f;\n      };\n      f.getMockName = () => {\n        const mockConfig = this._ensureMockConfig(f);\n        return mockConfig.mockName || 'jest.fn()';\n      };\n      if (metadata.mockImpl) {\n        f.mockImplementation(metadata.mockImpl);\n      }\n      return f;\n    } else {\n      const unknownType = metadata.type || 'undefined type';\n      throw new Error('Unrecognized type ' + unknownType);\n    }\n  }\n  _createMockFunction(metadata, mockConstructor) {\n    let name = metadata.name;\n    if (!name) {\n      return mockConstructor;\n    } // Preserve `name` property of mocked function.\n\n    const boundFunctionPrefix = 'bound ';\n    let bindCall = ''; // if-do-while for perf reasons. The common case is for the if to fail.\n\n    if (name && name.startsWith(boundFunctionPrefix)) {\n      do {\n        name = name.substring(boundFunctionPrefix.length); // Call bind() just to alter the function name.\n\n        bindCall = '.bind(null)';\n      } while (name && name.startsWith(boundFunctionPrefix));\n    } // Special case functions named `mockConstructor` to guard for infinite\n    // loops.\n\n    if (name === MOCK_CONSTRUCTOR_NAME) {\n      return mockConstructor;\n    }\n    if (\n    // It's a syntax error to define functions with a reserved keyword\n    // as name.\n    RESERVED_KEYWORDS.has(name) ||\n    // It's also a syntax error to define functions with a name that starts with a number\n    /^\\d/.test(name)) {\n      name = '$' + name;\n    } // It's also a syntax error to define a function with a reserved character\n    // as part of it's name.\n\n    if (FUNCTION_NAME_RESERVED_PATTERN.test(name)) {\n      name = name.replace(FUNCTION_NAME_RESERVED_REPLACE, '$');\n    }\n    const body = 'return function ' + name + '() {' + 'return ' + MOCK_CONSTRUCTOR_NAME + '.apply(this,arguments);' + '}' + bindCall;\n    const createConstructor = new this._environmentGlobal.Function(MOCK_CONSTRUCTOR_NAME, body);\n    return createConstructor(mockConstructor);\n  }\n  _generateMock(metadata, callbacks, refs) {\n    // metadata not compatible but it's the same type, maybe problem with\n    // overloading of _makeComponent and not _generateMock?\n    // @ts-expect-error\n    const mock = this._makeComponent(metadata);\n    if (metadata.refID != null) {\n      refs[metadata.refID] = mock;\n    }\n    this._getSlots(metadata.members).forEach(slot => {\n      const slotMetadata = metadata.members && metadata.members[slot] || {};\n      if (slotMetadata.ref != null) {\n        callbacks.push(function (ref) {\n          return () => mock[slot] = refs[ref];\n        }(slotMetadata.ref));\n      } else {\n        mock[slot] = this._generateMock(slotMetadata, callbacks, refs);\n      }\n    });\n    if (metadata.type !== 'undefined' && metadata.type !== 'null' && mock.prototype && typeof mock.prototype === 'object') {\n      mock.prototype.constructor = mock;\n    }\n    return mock;\n  }\n  /**\n   * @see README.md\n   * @param _metadata Metadata for the mock in the schema returned by the\n   * getMetadata method of this module.\n   */\n\n  generateFromMetadata(_metadata) {\n    const callbacks = [];\n    const refs = {};\n    const mock = this._generateMock(_metadata, callbacks, refs);\n    callbacks.forEach(setter => setter());\n    return mock;\n  }\n  /**\n   * @see README.md\n   * @param component The component for which to retrieve metadata.\n   */\n\n  getMetadata(component, _refs) {\n    const refs = _refs || new Map();\n    const ref = refs.get(component);\n    if (ref != null) {\n      return {\n        ref\n      };\n    }\n    const type = getType(component);\n    if (!type) {\n      return null;\n    }\n    const metadata = {\n      type\n    };\n    if (type === 'constant' || type === 'collection' || type === 'undefined' || type === 'null') {\n      metadata.value = component;\n      return metadata;\n    } else if (type === 'function') {\n      // @ts-expect-error this is a function so it has a name\n      metadata.name = component.name; // @ts-expect-error may be a mock\n\n      if (component._isMockFunction === true) {\n        // @ts-expect-error may be a mock\n        metadata.mockImpl = component.getMockImplementation();\n      }\n    }\n    metadata.refID = refs.size;\n    refs.set(component, metadata.refID);\n    let members = null; // Leave arrays alone\n\n    if (type !== 'array') {\n      this._getSlots(component).forEach(slot => {\n        if (type === 'function' &&\n        // @ts-expect-error may be a mock\n        component._isMockFunction === true && slot.match(/^mock/)) {\n          return;\n        } // @ts-expect-error no index signature\n\n        const slotMetadata = this.getMetadata(component[slot], refs);\n        if (slotMetadata) {\n          if (!members) {\n            members = {};\n          }\n          members[slot] = slotMetadata;\n        }\n      });\n    }\n    if (members) {\n      metadata.members = members;\n    }\n    return metadata;\n  }\n  isMockFunction(fn) {\n    return !!fn && fn._isMockFunction === true;\n  }\n  fn(implementation) {\n    const length = implementation ? implementation.length : 0;\n    const fn = this._makeComponent({\n      length,\n      type: 'function'\n    });\n    if (implementation) {\n      fn.mockImplementation(implementation);\n    }\n    return fn;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  spyOn(object, methodName, accessType) {\n    if (accessType) {\n      return this._spyOnProperty(object, methodName, accessType);\n    }\n    if (typeof object !== 'object' && typeof object !== 'function') {\n      throw new Error('Cannot spyOn on a primitive value; ' + this._typeOf(object) + ' given');\n    }\n    const original = object[methodName];\n    if (!this.isMockFunction(original)) {\n      if (typeof original !== 'function') {\n        throw new Error('Cannot spy the ' + methodName + ' property because it is not a function; ' + this._typeOf(original) + ' given instead');\n      }\n      const isMethodOwner = Object.prototype.hasOwnProperty.call(object, methodName);\n      let descriptor = Object.getOwnPropertyDescriptor(object, methodName);\n      let proto = Object.getPrototypeOf(object);\n      while (!descriptor && proto !== null) {\n        descriptor = Object.getOwnPropertyDescriptor(proto, methodName);\n        proto = Object.getPrototypeOf(proto);\n      }\n      let mock;\n      if (descriptor && descriptor.get) {\n        const originalGet = descriptor.get;\n        mock = this._makeComponent({\n          type: 'function'\n        }, () => {\n          descriptor.get = originalGet;\n          Object.defineProperty(object, methodName, descriptor);\n        });\n        descriptor.get = () => mock;\n        Object.defineProperty(object, methodName, descriptor);\n      } else {\n        mock = this._makeComponent({\n          type: 'function'\n        }, () => {\n          if (isMethodOwner) {\n            object[methodName] = original;\n          } else {\n            delete object[methodName];\n          }\n        }); // @ts-expect-error overriding original method with a Mock\n\n        object[methodName] = mock;\n      }\n      mock.mockImplementation(function () {\n        return original.apply(this, arguments);\n      });\n    }\n    return object[methodName];\n  }\n  _spyOnProperty(obj, propertyName, accessType = 'get') {\n    if (typeof obj !== 'object' && typeof obj !== 'function') {\n      throw new Error('Cannot spyOn on a primitive value; ' + this._typeOf(obj) + ' given');\n    }\n    if (!obj) {\n      throw new Error('spyOn could not find an object to spy upon for ' + propertyName + '');\n    }\n    if (!propertyName) {\n      throw new Error('No property name supplied');\n    }\n    let descriptor = Object.getOwnPropertyDescriptor(obj, propertyName);\n    let proto = Object.getPrototypeOf(obj);\n    while (!descriptor && proto !== null) {\n      descriptor = Object.getOwnPropertyDescriptor(proto, propertyName);\n      proto = Object.getPrototypeOf(proto);\n    }\n    if (!descriptor) {\n      throw new Error(propertyName + ' property does not exist');\n    }\n    if (!descriptor.configurable) {\n      throw new Error(propertyName + ' is not declared configurable');\n    }\n    if (!descriptor[accessType]) {\n      throw new Error('Property ' + propertyName + ' does not have access type ' + accessType);\n    }\n    const original = descriptor[accessType];\n    if (!this.isMockFunction(original)) {\n      if (typeof original !== 'function') {\n        throw new Error('Cannot spy the ' + propertyName + ' property because it is not a function; ' + this._typeOf(original) + ' given instead');\n      } // @ts-expect-error: mock is assignable\n\n      descriptor[accessType] = this._makeComponent({\n        type: 'function'\n      }, () => {\n        // @ts-expect-error: mock is assignable\n        descriptor[accessType] = original;\n        Object.defineProperty(obj, propertyName, descriptor);\n      });\n      descriptor[accessType].mockImplementation(function () {\n        // @ts-expect-error\n        return original.apply(this, arguments);\n      });\n    }\n    Object.defineProperty(obj, propertyName, descriptor);\n    return descriptor[accessType];\n  }\n  clearAllMocks() {\n    this._mockState = new WeakMap();\n  }\n  resetAllMocks() {\n    this._mockConfigRegistry = new WeakMap();\n    this._mockState = new WeakMap();\n  }\n  restoreAllMocks() {\n    this._spyState.forEach(restore => restore());\n    this._spyState = new Set();\n  }\n  _typeOf(value) {\n    return value == null ? '' + value : typeof value;\n  } // the typings test helper\n\n  mocked(item, _deep = false) {\n    return item;\n  }\n}\nexports.ModuleMocker = ModuleMocker;\nconst JestMock = new ModuleMocker(global);\nconst fn = JestMock.fn.bind(JestMock);\nexports.fn = fn;\nconst spyOn = JestMock.spyOn.bind(JestMock);\nexports.spyOn = spyOn;\nconst mocked = JestMock.mocked.bind(JestMock);\nexports.mocked = mocked;","map":{"version":3,"names":["Object","defineProperty","exports","value","spyOn","mocked","fn","ModuleMocker","_defineProperty","obj","key","enumerable","configurable","writable","MOCK_CONSTRUCTOR_NAME","FUNCTION_NAME_RESERVED_PATTERN","FUNCTION_NAME_RESERVED_REPLACE","RegExp","source","RESERVED_KEYWORDS","Set","matchArity","length","mockConstructor","_a","apply","arguments","_b","_c","_d","_e","_f","_g","_h","_i","getObjectType","prototype","toString","slice","getType","ref","typeName","Array","isArray","undefined","isReadonlyProp","object","prop","constructor","global","_environmentGlobal","_mockState","WeakMap","_mockConfigRegistry","_spyState","_invocationCallCounter","_getSlots","slots","EnvObjectProto","EnvFunctionProto","Function","EnvRegExpProto","ObjectProto","FunctionProto","RegExpProto","ownNames","getOwnPropertyNames","i","propDesc","getOwnPropertyDescriptor","get","__esModule","add","getPrototypeOf","from","_ensureMockConfig","f","config","_defaultMockConfig","set","_ensureMockState","state","_defaultMockState","calls","lastCall","mockImpl","mockName","specificMockImpls","specificReturnValues","instances","invocationCallOrder","results","_makeComponent","metadata","restore","type","members","prototypeSlots","mocker","args","mockState","mockConfig","push","mockResult","finalReturnValue","thrownError","callDidThrowError","forEach","slot","protoImpl","generateFromMetadata","_protoImpl","shift","specificMockImpl","error","_createMockFunction","_isMockFunction","getMockImplementation","val","mockClear","delete","mockReset","mockRestore","mockReturnValueOnce","mockImplementationOnce","mockResolvedValueOnce","Promise","resolve","mockRejectedValueOnce","reject","mockReturnValue","mockImplementation","mockResolvedValue","mockRejectedValue","mockReturnThis","name","getMockName","unknownType","Error","boundFunctionPrefix","bindCall","startsWith","substring","has","test","replace","body","createConstructor","_generateMock","callbacks","refs","mock","refID","slotMetadata","_metadata","setter","getMetadata","component","_refs","Map","size","match","isMockFunction","implementation","methodName","accessType","_spyOnProperty","_typeOf","original","isMethodOwner","hasOwnProperty","call","descriptor","proto","originalGet","propertyName","clearAllMocks","resetAllMocks","restoreAllMocks","item","_deep","JestMock","bind"],"sources":["C:/Users/drevo/Documents/GitHub/Crafts/TypeScript/Wordle/node_modules/@storybook/addon-interactions/node_modules/jest-mock/build/index.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.spyOn = exports.mocked = exports.fn = exports.ModuleMocker = void 0;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* eslint-disable local/ban-types-eventually, local/prefer-rest-params-eventually */\n\n/**\n * Possible types of a MockFunctionResult.\n * 'return': The call completed by returning normally.\n * 'throw': The call completed by throwing a value.\n * 'incomplete': The call has not completed yet. This is possible if you read\n *               the  mock function result from within the mock function itself\n *               (or a function called by the mock function).\n */\n\n/**\n * Represents the result of a single call to a mock function.\n */\n// see https://github.com/Microsoft/TypeScript/issues/25215\nconst MOCK_CONSTRUCTOR_NAME = 'mockConstructor';\nconst FUNCTION_NAME_RESERVED_PATTERN = /[\\s!-\\/:-@\\[-`{-~]/;\nconst FUNCTION_NAME_RESERVED_REPLACE = new RegExp(\n  FUNCTION_NAME_RESERVED_PATTERN.source,\n  'g'\n);\nconst RESERVED_KEYWORDS = new Set([\n  'arguments',\n  'await',\n  'break',\n  'case',\n  'catch',\n  'class',\n  'const',\n  'continue',\n  'debugger',\n  'default',\n  'delete',\n  'do',\n  'else',\n  'enum',\n  'eval',\n  'export',\n  'extends',\n  'false',\n  'finally',\n  'for',\n  'function',\n  'if',\n  'implements',\n  'import',\n  'in',\n  'instanceof',\n  'interface',\n  'let',\n  'new',\n  'null',\n  'package',\n  'private',\n  'protected',\n  'public',\n  'return',\n  'static',\n  'super',\n  'switch',\n  'this',\n  'throw',\n  'true',\n  'try',\n  'typeof',\n  'var',\n  'void',\n  'while',\n  'with',\n  'yield'\n]);\n\nfunction matchArity(fn, length) {\n  let mockConstructor;\n\n  switch (length) {\n    case 1:\n      mockConstructor = function (_a) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 2:\n      mockConstructor = function (_a, _b) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 3:\n      mockConstructor = function (_a, _b, _c) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 4:\n      mockConstructor = function (_a, _b, _c, _d) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 5:\n      mockConstructor = function (_a, _b, _c, _d, _e) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 6:\n      mockConstructor = function (_a, _b, _c, _d, _e, _f) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 7:\n      mockConstructor = function (_a, _b, _c, _d, _e, _f, _g) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 8:\n      mockConstructor = function (_a, _b, _c, _d, _e, _f, _g, _h) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 9:\n      mockConstructor = function (_a, _b, _c, _d, _e, _f, _g, _h, _i) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    default:\n      mockConstructor = function () {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n  }\n\n  return mockConstructor;\n}\n\nfunction getObjectType(value) {\n  return Object.prototype.toString.apply(value).slice(8, -1);\n}\n\nfunction getType(ref) {\n  const typeName = getObjectType(ref);\n\n  if (\n    typeName === 'Function' ||\n    typeName === 'AsyncFunction' ||\n    typeName === 'GeneratorFunction'\n  ) {\n    return 'function';\n  } else if (Array.isArray(ref)) {\n    return 'array';\n  } else if (typeName === 'Object') {\n    return 'object';\n  } else if (\n    typeName === 'Number' ||\n    typeName === 'String' ||\n    typeName === 'Boolean' ||\n    typeName === 'Symbol'\n  ) {\n    return 'constant';\n  } else if (\n    typeName === 'Map' ||\n    typeName === 'WeakMap' ||\n    typeName === 'Set'\n  ) {\n    return 'collection';\n  } else if (typeName === 'RegExp') {\n    return 'regexp';\n  } else if (ref === undefined) {\n    return 'undefined';\n  } else if (ref === null) {\n    return 'null';\n  } else {\n    return null;\n  }\n}\n\nfunction isReadonlyProp(object, prop) {\n  if (\n    prop === 'arguments' ||\n    prop === 'caller' ||\n    prop === 'callee' ||\n    prop === 'name' ||\n    prop === 'length'\n  ) {\n    const typeName = getObjectType(object);\n    return (\n      typeName === 'Function' ||\n      typeName === 'AsyncFunction' ||\n      typeName === 'GeneratorFunction'\n    );\n  }\n\n  if (\n    prop === 'source' ||\n    prop === 'global' ||\n    prop === 'ignoreCase' ||\n    prop === 'multiline'\n  ) {\n    return getObjectType(object) === 'RegExp';\n  }\n\n  return false;\n}\n\nclass ModuleMocker {\n  /**\n   * @see README.md\n   * @param global Global object of the test environment, used to create\n   * mocks\n   */\n  constructor(global) {\n    _defineProperty(this, '_environmentGlobal', void 0);\n\n    _defineProperty(this, '_mockState', void 0);\n\n    _defineProperty(this, '_mockConfigRegistry', void 0);\n\n    _defineProperty(this, '_spyState', void 0);\n\n    _defineProperty(this, '_invocationCallCounter', void 0);\n\n    this._environmentGlobal = global;\n    this._mockState = new WeakMap();\n    this._mockConfigRegistry = new WeakMap();\n    this._spyState = new Set();\n    this._invocationCallCounter = 1;\n  }\n\n  _getSlots(object) {\n    if (!object) {\n      return [];\n    }\n\n    const slots = new Set();\n    const EnvObjectProto = this._environmentGlobal.Object.prototype;\n    const EnvFunctionProto = this._environmentGlobal.Function.prototype;\n    const EnvRegExpProto = this._environmentGlobal.RegExp.prototype; // Also check the builtins in the current context as they leak through\n    // core node modules.\n\n    const ObjectProto = Object.prototype;\n    const FunctionProto = Function.prototype;\n    const RegExpProto = RegExp.prototype; // Properties of Object.prototype, Function.prototype and RegExp.prototype\n    // are never reported as slots\n\n    while (\n      object != null &&\n      object !== EnvObjectProto &&\n      object !== EnvFunctionProto &&\n      object !== EnvRegExpProto &&\n      object !== ObjectProto &&\n      object !== FunctionProto &&\n      object !== RegExpProto\n    ) {\n      const ownNames = Object.getOwnPropertyNames(object);\n\n      for (let i = 0; i < ownNames.length; i++) {\n        const prop = ownNames[i];\n\n        if (!isReadonlyProp(object, prop)) {\n          const propDesc = Object.getOwnPropertyDescriptor(object, prop);\n\n          if ((propDesc !== undefined && !propDesc.get) || object.__esModule) {\n            slots.add(prop);\n          }\n        }\n      }\n\n      object = Object.getPrototypeOf(object);\n    }\n\n    return Array.from(slots);\n  }\n\n  _ensureMockConfig(f) {\n    let config = this._mockConfigRegistry.get(f);\n\n    if (!config) {\n      config = this._defaultMockConfig();\n\n      this._mockConfigRegistry.set(f, config);\n    }\n\n    return config;\n  }\n\n  _ensureMockState(f) {\n    let state = this._mockState.get(f);\n\n    if (!state) {\n      state = this._defaultMockState();\n\n      this._mockState.set(f, state);\n    }\n\n    if (state.calls.length > 0) {\n      state.lastCall = state.calls[state.calls.length - 1];\n    }\n\n    return state;\n  }\n\n  _defaultMockConfig() {\n    return {\n      mockImpl: undefined,\n      mockName: 'jest.fn()',\n      specificMockImpls: [],\n      specificReturnValues: []\n    };\n  }\n\n  _defaultMockState() {\n    return {\n      calls: [],\n      instances: [],\n      invocationCallOrder: [],\n      results: []\n    };\n  }\n\n  _makeComponent(metadata, restore) {\n    if (metadata.type === 'object') {\n      return new this._environmentGlobal.Object();\n    } else if (metadata.type === 'array') {\n      return new this._environmentGlobal.Array();\n    } else if (metadata.type === 'regexp') {\n      return new this._environmentGlobal.RegExp('');\n    } else if (\n      metadata.type === 'constant' ||\n      metadata.type === 'collection' ||\n      metadata.type === 'null' ||\n      metadata.type === 'undefined'\n    ) {\n      return metadata.value;\n    } else if (metadata.type === 'function') {\n      const prototype =\n        (metadata.members &&\n          metadata.members.prototype &&\n          metadata.members.prototype.members) ||\n        {};\n\n      const prototypeSlots = this._getSlots(prototype);\n\n      const mocker = this;\n      const mockConstructor = matchArity(function (...args) {\n        const mockState = mocker._ensureMockState(f);\n\n        const mockConfig = mocker._ensureMockConfig(f);\n\n        mockState.instances.push(this);\n        mockState.calls.push(args); // Create and record an \"incomplete\" mock result immediately upon\n        // calling rather than waiting for the mock to return. This avoids\n        // issues caused by recursion where results can be recorded in the\n        // wrong order.\n\n        const mockResult = {\n          type: 'incomplete',\n          value: undefined\n        };\n        mockState.results.push(mockResult);\n        mockState.invocationCallOrder.push(mocker._invocationCallCounter++); // Will be set to the return value of the mock if an error is not thrown\n\n        let finalReturnValue; // Will be set to the error that is thrown by the mock (if it throws)\n\n        let thrownError; // Will be set to true if the mock throws an error. The presence of a\n        // value in `thrownError` is not a 100% reliable indicator because a\n        // function could throw a value of undefined.\n\n        let callDidThrowError = false;\n\n        try {\n          // The bulk of the implementation is wrapped in an immediately\n          // executed arrow function so the return value of the mock function\n          // can be easily captured and recorded, despite the many separate\n          // return points within the logic.\n          finalReturnValue = (() => {\n            if (this instanceof f) {\n              // This is probably being called as a constructor\n              prototypeSlots.forEach(slot => {\n                // Copy prototype methods to the instance to make\n                // it easier to interact with mock instance call and\n                // return values\n                if (prototype[slot].type === 'function') {\n                  // @ts-expect-error no index signature\n                  const protoImpl = this[slot]; // @ts-expect-error no index signature\n\n                  this[slot] = mocker.generateFromMetadata(prototype[slot]); // @ts-expect-error no index signature\n\n                  this[slot]._protoImpl = protoImpl;\n                }\n              }); // Run the mock constructor implementation\n\n              const mockImpl = mockConfig.specificMockImpls.length\n                ? mockConfig.specificMockImpls.shift()\n                : mockConfig.mockImpl;\n              return mockImpl && mockImpl.apply(this, arguments);\n            } // If mockImplementationOnce()/mockImplementation() is last set,\n            // implementation use the mock\n\n            let specificMockImpl = mockConfig.specificMockImpls.shift();\n\n            if (specificMockImpl === undefined) {\n              specificMockImpl = mockConfig.mockImpl;\n            }\n\n            if (specificMockImpl) {\n              return specificMockImpl.apply(this, arguments);\n            } // Otherwise use prototype implementation\n\n            if (f._protoImpl) {\n              return f._protoImpl.apply(this, arguments);\n            }\n\n            return undefined;\n          })();\n        } catch (error) {\n          // Store the thrown error so we can record it, then re-throw it.\n          thrownError = error;\n          callDidThrowError = true;\n          throw error;\n        } finally {\n          // Record the result of the function.\n          // NOTE: Intentionally NOT pushing/indexing into the array of mock\n          //       results here to avoid corrupting results data if mockClear()\n          //       is called during the execution of the mock.\n          mockResult.type = callDidThrowError ? 'throw' : 'return';\n          mockResult.value = callDidThrowError ? thrownError : finalReturnValue;\n        }\n\n        return finalReturnValue;\n      }, metadata.length || 0);\n\n      const f = this._createMockFunction(metadata, mockConstructor);\n\n      f._isMockFunction = true;\n\n      f.getMockImplementation = () => this._ensureMockConfig(f).mockImpl;\n\n      if (typeof restore === 'function') {\n        this._spyState.add(restore);\n      }\n\n      this._mockState.set(f, this._defaultMockState());\n\n      this._mockConfigRegistry.set(f, this._defaultMockConfig());\n\n      Object.defineProperty(f, 'mock', {\n        configurable: false,\n        enumerable: true,\n        get: () => this._ensureMockState(f),\n        set: val => this._mockState.set(f, val)\n      });\n\n      f.mockClear = () => {\n        this._mockState.delete(f);\n\n        return f;\n      };\n\n      f.mockReset = () => {\n        f.mockClear();\n\n        this._mockConfigRegistry.delete(f);\n\n        return f;\n      };\n\n      f.mockRestore = () => {\n        f.mockReset();\n        return restore ? restore() : undefined;\n      };\n\n      f.mockReturnValueOnce = (\n        value // next function call will return this value or default return value\n      ) => f.mockImplementationOnce(() => value);\n\n      f.mockResolvedValueOnce = value =>\n        f.mockImplementationOnce(() => Promise.resolve(value));\n\n      f.mockRejectedValueOnce = value =>\n        f.mockImplementationOnce(() => Promise.reject(value));\n\n      f.mockReturnValue = (\n        value // next function call will return specified return value or this one\n      ) => f.mockImplementation(() => value);\n\n      f.mockResolvedValue = value =>\n        f.mockImplementation(() => Promise.resolve(value));\n\n      f.mockRejectedValue = value =>\n        f.mockImplementation(() => Promise.reject(value));\n\n      f.mockImplementationOnce = fn => {\n        // next function call will use this mock implementation return value\n        // or default mock implementation return value\n        const mockConfig = this._ensureMockConfig(f);\n\n        mockConfig.specificMockImpls.push(fn);\n        return f;\n      };\n\n      f.mockImplementation = fn => {\n        // next function call will use mock implementation return value\n        const mockConfig = this._ensureMockConfig(f);\n\n        mockConfig.mockImpl = fn;\n        return f;\n      };\n\n      f.mockReturnThis = () =>\n        f.mockImplementation(function () {\n          return this;\n        });\n\n      f.mockName = name => {\n        if (name) {\n          const mockConfig = this._ensureMockConfig(f);\n\n          mockConfig.mockName = name;\n        }\n\n        return f;\n      };\n\n      f.getMockName = () => {\n        const mockConfig = this._ensureMockConfig(f);\n\n        return mockConfig.mockName || 'jest.fn()';\n      };\n\n      if (metadata.mockImpl) {\n        f.mockImplementation(metadata.mockImpl);\n      }\n\n      return f;\n    } else {\n      const unknownType = metadata.type || 'undefined type';\n      throw new Error('Unrecognized type ' + unknownType);\n    }\n  }\n\n  _createMockFunction(metadata, mockConstructor) {\n    let name = metadata.name;\n\n    if (!name) {\n      return mockConstructor;\n    } // Preserve `name` property of mocked function.\n\n    const boundFunctionPrefix = 'bound ';\n    let bindCall = ''; // if-do-while for perf reasons. The common case is for the if to fail.\n\n    if (name && name.startsWith(boundFunctionPrefix)) {\n      do {\n        name = name.substring(boundFunctionPrefix.length); // Call bind() just to alter the function name.\n\n        bindCall = '.bind(null)';\n      } while (name && name.startsWith(boundFunctionPrefix));\n    } // Special case functions named `mockConstructor` to guard for infinite\n    // loops.\n\n    if (name === MOCK_CONSTRUCTOR_NAME) {\n      return mockConstructor;\n    }\n\n    if (\n      // It's a syntax error to define functions with a reserved keyword\n      // as name.\n      RESERVED_KEYWORDS.has(name) || // It's also a syntax error to define functions with a name that starts with a number\n      /^\\d/.test(name)\n    ) {\n      name = '$' + name;\n    } // It's also a syntax error to define a function with a reserved character\n    // as part of it's name.\n\n    if (FUNCTION_NAME_RESERVED_PATTERN.test(name)) {\n      name = name.replace(FUNCTION_NAME_RESERVED_REPLACE, '$');\n    }\n\n    const body =\n      'return function ' +\n      name +\n      '() {' +\n      'return ' +\n      MOCK_CONSTRUCTOR_NAME +\n      '.apply(this,arguments);' +\n      '}' +\n      bindCall;\n    const createConstructor = new this._environmentGlobal.Function(\n      MOCK_CONSTRUCTOR_NAME,\n      body\n    );\n    return createConstructor(mockConstructor);\n  }\n\n  _generateMock(metadata, callbacks, refs) {\n    // metadata not compatible but it's the same type, maybe problem with\n    // overloading of _makeComponent and not _generateMock?\n    // @ts-expect-error\n    const mock = this._makeComponent(metadata);\n\n    if (metadata.refID != null) {\n      refs[metadata.refID] = mock;\n    }\n\n    this._getSlots(metadata.members).forEach(slot => {\n      const slotMetadata = (metadata.members && metadata.members[slot]) || {};\n\n      if (slotMetadata.ref != null) {\n        callbacks.push(\n          (function (ref) {\n            return () => (mock[slot] = refs[ref]);\n          })(slotMetadata.ref)\n        );\n      } else {\n        mock[slot] = this._generateMock(slotMetadata, callbacks, refs);\n      }\n    });\n\n    if (\n      metadata.type !== 'undefined' &&\n      metadata.type !== 'null' &&\n      mock.prototype &&\n      typeof mock.prototype === 'object'\n    ) {\n      mock.prototype.constructor = mock;\n    }\n\n    return mock;\n  }\n  /**\n   * @see README.md\n   * @param _metadata Metadata for the mock in the schema returned by the\n   * getMetadata method of this module.\n   */\n\n  generateFromMetadata(_metadata) {\n    const callbacks = [];\n    const refs = {};\n\n    const mock = this._generateMock(_metadata, callbacks, refs);\n\n    callbacks.forEach(setter => setter());\n    return mock;\n  }\n  /**\n   * @see README.md\n   * @param component The component for which to retrieve metadata.\n   */\n\n  getMetadata(component, _refs) {\n    const refs = _refs || new Map();\n    const ref = refs.get(component);\n\n    if (ref != null) {\n      return {\n        ref\n      };\n    }\n\n    const type = getType(component);\n\n    if (!type) {\n      return null;\n    }\n\n    const metadata = {\n      type\n    };\n\n    if (\n      type === 'constant' ||\n      type === 'collection' ||\n      type === 'undefined' ||\n      type === 'null'\n    ) {\n      metadata.value = component;\n      return metadata;\n    } else if (type === 'function') {\n      // @ts-expect-error this is a function so it has a name\n      metadata.name = component.name; // @ts-expect-error may be a mock\n\n      if (component._isMockFunction === true) {\n        // @ts-expect-error may be a mock\n        metadata.mockImpl = component.getMockImplementation();\n      }\n    }\n\n    metadata.refID = refs.size;\n    refs.set(component, metadata.refID);\n    let members = null; // Leave arrays alone\n\n    if (type !== 'array') {\n      this._getSlots(component).forEach(slot => {\n        if (\n          type === 'function' && // @ts-expect-error may be a mock\n          component._isMockFunction === true &&\n          slot.match(/^mock/)\n        ) {\n          return;\n        } // @ts-expect-error no index signature\n\n        const slotMetadata = this.getMetadata(component[slot], refs);\n\n        if (slotMetadata) {\n          if (!members) {\n            members = {};\n          }\n\n          members[slot] = slotMetadata;\n        }\n      });\n    }\n\n    if (members) {\n      metadata.members = members;\n    }\n\n    return metadata;\n  }\n\n  isMockFunction(fn) {\n    return !!fn && fn._isMockFunction === true;\n  }\n\n  fn(implementation) {\n    const length = implementation ? implementation.length : 0;\n\n    const fn = this._makeComponent({\n      length,\n      type: 'function'\n    });\n\n    if (implementation) {\n      fn.mockImplementation(implementation);\n    }\n\n    return fn;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  spyOn(object, methodName, accessType) {\n    if (accessType) {\n      return this._spyOnProperty(object, methodName, accessType);\n    }\n\n    if (typeof object !== 'object' && typeof object !== 'function') {\n      throw new Error(\n        'Cannot spyOn on a primitive value; ' + this._typeOf(object) + ' given'\n      );\n    }\n\n    const original = object[methodName];\n\n    if (!this.isMockFunction(original)) {\n      if (typeof original !== 'function') {\n        throw new Error(\n          'Cannot spy the ' +\n            methodName +\n            ' property because it is not a function; ' +\n            this._typeOf(original) +\n            ' given instead'\n        );\n      }\n\n      const isMethodOwner = Object.prototype.hasOwnProperty.call(\n        object,\n        methodName\n      );\n      let descriptor = Object.getOwnPropertyDescriptor(object, methodName);\n      let proto = Object.getPrototypeOf(object);\n\n      while (!descriptor && proto !== null) {\n        descriptor = Object.getOwnPropertyDescriptor(proto, methodName);\n        proto = Object.getPrototypeOf(proto);\n      }\n\n      let mock;\n\n      if (descriptor && descriptor.get) {\n        const originalGet = descriptor.get;\n        mock = this._makeComponent(\n          {\n            type: 'function'\n          },\n          () => {\n            descriptor.get = originalGet;\n            Object.defineProperty(object, methodName, descriptor);\n          }\n        );\n\n        descriptor.get = () => mock;\n\n        Object.defineProperty(object, methodName, descriptor);\n      } else {\n        mock = this._makeComponent(\n          {\n            type: 'function'\n          },\n          () => {\n            if (isMethodOwner) {\n              object[methodName] = original;\n            } else {\n              delete object[methodName];\n            }\n          }\n        ); // @ts-expect-error overriding original method with a Mock\n\n        object[methodName] = mock;\n      }\n\n      mock.mockImplementation(function () {\n        return original.apply(this, arguments);\n      });\n    }\n\n    return object[methodName];\n  }\n\n  _spyOnProperty(obj, propertyName, accessType = 'get') {\n    if (typeof obj !== 'object' && typeof obj !== 'function') {\n      throw new Error(\n        'Cannot spyOn on a primitive value; ' + this._typeOf(obj) + ' given'\n      );\n    }\n\n    if (!obj) {\n      throw new Error(\n        'spyOn could not find an object to spy upon for ' + propertyName + ''\n      );\n    }\n\n    if (!propertyName) {\n      throw new Error('No property name supplied');\n    }\n\n    let descriptor = Object.getOwnPropertyDescriptor(obj, propertyName);\n    let proto = Object.getPrototypeOf(obj);\n\n    while (!descriptor && proto !== null) {\n      descriptor = Object.getOwnPropertyDescriptor(proto, propertyName);\n      proto = Object.getPrototypeOf(proto);\n    }\n\n    if (!descriptor) {\n      throw new Error(propertyName + ' property does not exist');\n    }\n\n    if (!descriptor.configurable) {\n      throw new Error(propertyName + ' is not declared configurable');\n    }\n\n    if (!descriptor[accessType]) {\n      throw new Error(\n        'Property ' + propertyName + ' does not have access type ' + accessType\n      );\n    }\n\n    const original = descriptor[accessType];\n\n    if (!this.isMockFunction(original)) {\n      if (typeof original !== 'function') {\n        throw new Error(\n          'Cannot spy the ' +\n            propertyName +\n            ' property because it is not a function; ' +\n            this._typeOf(original) +\n            ' given instead'\n        );\n      } // @ts-expect-error: mock is assignable\n\n      descriptor[accessType] = this._makeComponent(\n        {\n          type: 'function'\n        },\n        () => {\n          // @ts-expect-error: mock is assignable\n          descriptor[accessType] = original;\n          Object.defineProperty(obj, propertyName, descriptor);\n        }\n      );\n      descriptor[accessType].mockImplementation(function () {\n        // @ts-expect-error\n        return original.apply(this, arguments);\n      });\n    }\n\n    Object.defineProperty(obj, propertyName, descriptor);\n    return descriptor[accessType];\n  }\n\n  clearAllMocks() {\n    this._mockState = new WeakMap();\n  }\n\n  resetAllMocks() {\n    this._mockConfigRegistry = new WeakMap();\n    this._mockState = new WeakMap();\n  }\n\n  restoreAllMocks() {\n    this._spyState.forEach(restore => restore());\n\n    this._spyState = new Set();\n  }\n\n  _typeOf(value) {\n    return value == null ? '' + value : typeof value;\n  } // the typings test helper\n\n  mocked(item, _deep = false) {\n    return item;\n  }\n}\n\nexports.ModuleMocker = ModuleMocker;\nconst JestMock = new ModuleMocker(global);\nconst fn = JestMock.fn.bind(JestMock);\nexports.fn = fn;\nconst spyOn = JestMock.spyOn.bind(JestMock);\nexports.spyOn = spyOn;\nconst mocked = JestMock.mocked.bind(JestMock);\nexports.mocked = mocked;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}