{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/drevo/Documents/GitHub/Crafts/TypeScript/Storybook/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport '../utils/click/isClickableInput.js';\nimport { createDataTransfer } from '../utils/dataTransfer/DataTransfer.js';\nimport { readDataTransferFromClipboard } from '../utils/dataTransfer/Clipboard.js';\nimport '../utils/edit/isEditable.js';\nimport '../utils/edit/maxLength.js';\nimport { getWindow } from '../utils/misc/getWindow.js';\nimport '../utils/keyDef/readNextDescriptor.js';\nimport '../utils/misc/level.js';\nimport '../options.js';\nfunction paste(_x) {\n  return _paste.apply(this, arguments);\n}\nfunction _paste() {\n  _paste = _asyncToGenerator(function* (clipboardData) {\n    const doc = this.config.document;\n    var _doc_activeElement;\n    const target = (_doc_activeElement = doc.activeElement) !== null && _doc_activeElement !== void 0 ? _doc_activeElement : /* istanbul ignore next */doc.body;\n    var _ref;\n    const dataTransfer = (_ref = typeof clipboardData === 'string' ? getClipboardDataFromString(doc, clipboardData) : clipboardData) !== null && _ref !== void 0 ? _ref : yield readDataTransferFromClipboard(doc).catch(() => {\n      throw new Error('`userEvent.paste()` without `clipboardData` requires the `ClipboardAPI` to be available.');\n    });\n    this.dispatchUIEvent(target, 'paste', {\n      clipboardData: dataTransfer\n    });\n  });\n  return _paste.apply(this, arguments);\n}\nfunction getClipboardDataFromString(doc, text) {\n  const dt = createDataTransfer(getWindow(doc));\n  dt.setData('text', text);\n  return dt;\n}\nexport { paste };","map":{"version":3,"names":["createDataTransfer","readDataTransferFromClipboard","getWindow","paste","_x","_paste","apply","arguments","_asyncToGenerator","clipboardData","doc","config","document","_doc_activeElement","target","activeElement","body","_ref","dataTransfer","getClipboardDataFromString","catch","Error","dispatchUIEvent","text","dt","setData"],"sources":["C:/Users/drevo/Documents/GitHub/Crafts/TypeScript/Storybook/node_modules/@testing-library/user-event/dist/esm/clipboard/paste.js"],"sourcesContent":["import '../utils/click/isClickableInput.js';\nimport { createDataTransfer } from '../utils/dataTransfer/DataTransfer.js';\nimport { readDataTransferFromClipboard } from '../utils/dataTransfer/Clipboard.js';\nimport '../utils/edit/isEditable.js';\nimport '../utils/edit/maxLength.js';\nimport { getWindow } from '../utils/misc/getWindow.js';\nimport '../utils/keyDef/readNextDescriptor.js';\nimport '../utils/misc/level.js';\nimport '../options.js';\n\nasync function paste(clipboardData) {\n    const doc = this.config.document;\n    var _doc_activeElement;\n    const target = (_doc_activeElement = doc.activeElement) !== null && _doc_activeElement !== void 0 ? _doc_activeElement : /* istanbul ignore next */ doc.body;\n    var _ref;\n    const dataTransfer = (_ref = typeof clipboardData === 'string' ? getClipboardDataFromString(doc, clipboardData) : clipboardData) !== null && _ref !== void 0 ? _ref : await readDataTransferFromClipboard(doc).catch(()=>{\n        throw new Error('`userEvent.paste()` without `clipboardData` requires the `ClipboardAPI` to be available.');\n    });\n    this.dispatchUIEvent(target, 'paste', {\n        clipboardData: dataTransfer\n    });\n}\nfunction getClipboardDataFromString(doc, text) {\n    const dt = createDataTransfer(getWindow(doc));\n    dt.setData('text', text);\n    return dt;\n}\n\nexport { paste };\n"],"mappings":";AAAA,OAAO,oCAAoC;AAC3C,SAASA,kBAAkB,QAAQ,uCAAuC;AAC1E,SAASC,6BAA6B,QAAQ,oCAAoC;AAClF,OAAO,6BAA6B;AACpC,OAAO,4BAA4B;AACnC,SAASC,SAAS,QAAQ,4BAA4B;AACtD,OAAO,uCAAuC;AAC9C,OAAO,wBAAwB;AAC/B,OAAO,eAAe;AAAC,SAERC,KAAKA,CAAAC,EAAA;EAAA,OAAAC,MAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,OAAA;EAAAA,MAAA,GAAAG,iBAAA,CAApB,WAAqBC,aAAa,EAAE;IAChC,MAAMC,GAAG,GAAG,IAAI,CAACC,MAAM,CAACC,QAAQ;IAChC,IAAIC,kBAAkB;IACtB,MAAMC,MAAM,GAAG,CAACD,kBAAkB,GAAGH,GAAG,CAACK,aAAa,MAAM,IAAI,IAAIF,kBAAkB,KAAK,KAAK,CAAC,GAAGA,kBAAkB,GAAG,0BAA2BH,GAAG,CAACM,IAAI;IAC5J,IAAIC,IAAI;IACR,MAAMC,YAAY,GAAG,CAACD,IAAI,GAAG,OAAOR,aAAa,KAAK,QAAQ,GAAGU,0BAA0B,CAACT,GAAG,EAAED,aAAa,CAAC,GAAGA,aAAa,MAAM,IAAI,IAAIQ,IAAI,KAAK,KAAK,CAAC,GAAGA,IAAI,SAAShB,6BAA6B,CAACS,GAAG,CAAC,CAACU,KAAK,CAAC,MAAI;MACrN,MAAM,IAAIC,KAAK,CAAC,0FAA0F,CAAC;IAC/G,CAAC,CAAC;IACF,IAAI,CAACC,eAAe,CAACR,MAAM,EAAE,OAAO,EAAE;MAClCL,aAAa,EAAES;IACnB,CAAC,CAAC;EACN,CAAC;EAAA,OAAAb,MAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AACD,SAASY,0BAA0BA,CAACT,GAAG,EAAEa,IAAI,EAAE;EAC3C,MAAMC,EAAE,GAAGxB,kBAAkB,CAACE,SAAS,CAACQ,GAAG,CAAC,CAAC;EAC7Cc,EAAE,CAACC,OAAO,CAAC,MAAM,EAAEF,IAAI,CAAC;EACxB,OAAOC,EAAE;AACb;AAEA,SAASrB,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}