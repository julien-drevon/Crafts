{"ast":null,"code":"import '../utils/click/isClickableInput.js';\nimport '../utils/dataTransfer/Clipboard.js';\nimport '../utils/edit/isEditable.js';\nimport '../utils/edit/maxLength.js';\nimport { isDisabled } from '../utils/misc/isDisabled.js';\nimport { getWindow } from '../utils/misc/getWindow.js';\nimport '../utils/keyDef/readNextDescriptor.js';\nimport '../utils/misc/level.js';\nimport '../options.js';\nimport { focusElement } from './focus.js';\nfunction walkRadio(instance, el, direction) {\n  const window = getWindow(el);\n  const group = Array.from(el.ownerDocument.querySelectorAll(el.name ? `input[type=\"radio\"][name=\"${window.CSS.escape(el.name)}\"]` : `input[type=\"radio\"][name=\"\"], input[type=\"radio\"]:not([name])`));\n  for (let i = group.findIndex(e => e === el) + direction;; i += direction) {\n    if (!group[i]) {\n      i = direction > 0 ? 0 : group.length - 1;\n    }\n    if (group[i] === el) {\n      return;\n    }\n    if (isDisabled(group[i])) {\n      continue;\n    }\n    focusElement(group[i]);\n    instance.dispatchUIEvent(group[i], 'click');\n  }\n}\nexport { walkRadio };","map":{"version":3,"names":["isDisabled","getWindow","focusElement","walkRadio","instance","el","direction","window","group","Array","from","ownerDocument","querySelectorAll","name","CSS","escape","i","findIndex","e","length","dispatchUIEvent"],"sources":["C:/Users/drevo/Documents/GitHub/Crafts/TypeScript/Storybook/node_modules/@testing-library/user-event/dist/esm/event/radio.js"],"sourcesContent":["import '../utils/click/isClickableInput.js';\nimport '../utils/dataTransfer/Clipboard.js';\nimport '../utils/edit/isEditable.js';\nimport '../utils/edit/maxLength.js';\nimport { isDisabled } from '../utils/misc/isDisabled.js';\nimport { getWindow } from '../utils/misc/getWindow.js';\nimport '../utils/keyDef/readNextDescriptor.js';\nimport '../utils/misc/level.js';\nimport '../options.js';\nimport { focusElement } from './focus.js';\n\nfunction walkRadio(instance, el, direction) {\n    const window = getWindow(el);\n    const group = Array.from(el.ownerDocument.querySelectorAll(el.name ? `input[type=\"radio\"][name=\"${window.CSS.escape(el.name)}\"]` : `input[type=\"radio\"][name=\"\"], input[type=\"radio\"]:not([name])`));\n    for(let i = group.findIndex((e)=>e === el) + direction;; i += direction){\n        if (!group[i]) {\n            i = direction > 0 ? 0 : group.length - 1;\n        }\n        if (group[i] === el) {\n            return;\n        }\n        if (isDisabled(group[i])) {\n            continue;\n        }\n        focusElement(group[i]);\n        instance.dispatchUIEvent(group[i], 'click');\n    }\n}\n\nexport { walkRadio };\n"],"mappings":"AAAA,OAAO,oCAAoC;AAC3C,OAAO,oCAAoC;AAC3C,OAAO,6BAA6B;AACpC,OAAO,4BAA4B;AACnC,SAASA,UAAU,QAAQ,6BAA6B;AACxD,SAASC,SAAS,QAAQ,4BAA4B;AACtD,OAAO,uCAAuC;AAC9C,OAAO,wBAAwB;AAC/B,OAAO,eAAe;AACtB,SAASC,YAAY,QAAQ,YAAY;AAEzC,SAASC,SAASA,CAACC,QAAQ,EAAEC,EAAE,EAAEC,SAAS,EAAE;EACxC,MAAMC,MAAM,GAAGN,SAAS,CAACI,EAAE,CAAC;EAC5B,MAAMG,KAAK,GAAGC,KAAK,CAACC,IAAI,CAACL,EAAE,CAACM,aAAa,CAACC,gBAAgB,CAACP,EAAE,CAACQ,IAAI,GAAI,6BAA4BN,MAAM,CAACO,GAAG,CAACC,MAAM,CAACV,EAAE,CAACQ,IAAI,CAAE,IAAG,GAAI,+DAA8D,CAAC,CAAC;EACpM,KAAI,IAAIG,CAAC,GAAGR,KAAK,CAACS,SAAS,CAAEC,CAAC,IAAGA,CAAC,KAAKb,EAAE,CAAC,GAAGC,SAAS,GAAGU,CAAC,IAAIV,SAAS,EAAC;IACpE,IAAI,CAACE,KAAK,CAACQ,CAAC,CAAC,EAAE;MACXA,CAAC,GAAGV,SAAS,GAAG,CAAC,GAAG,CAAC,GAAGE,KAAK,CAACW,MAAM,GAAG,CAAC;IAC5C;IACA,IAAIX,KAAK,CAACQ,CAAC,CAAC,KAAKX,EAAE,EAAE;MACjB;IACJ;IACA,IAAIL,UAAU,CAACQ,KAAK,CAACQ,CAAC,CAAC,CAAC,EAAE;MACtB;IACJ;IACAd,YAAY,CAACM,KAAK,CAACQ,CAAC,CAAC,CAAC;IACtBZ,QAAQ,CAACgB,eAAe,CAACZ,KAAK,CAACQ,CAAC,CAAC,EAAE,OAAO,CAAC;EAC/C;AACJ;AAEA,SAASb,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}