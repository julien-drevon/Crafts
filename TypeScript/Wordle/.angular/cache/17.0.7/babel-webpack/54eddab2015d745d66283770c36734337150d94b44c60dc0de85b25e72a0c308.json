{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/drevo/Documents/GitHub/Crafts/TypeScript/Wordle/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { releaseAllKeys } from '../keyboard/index.js';\nimport '../utils/click/isClickableInput.js';\nimport '../utils/dataTransfer/Clipboard.js';\nimport '../utils/edit/isEditable.js';\nimport '../utils/edit/maxLength.js';\nimport '@testing-library/dom/dist/helpers.js';\nimport '../utils/keyDef/readNextDescriptor.js';\nimport '../utils/misc/level.js';\nimport '../options.js';\nimport { setSelectionRange } from '../event/selection/setSelectionRange.js';\nfunction type(_x, _x2) {\n  return _type.apply(this, arguments);\n}\nfunction _type() {\n  _type = _asyncToGenerator(function* (element, text, {\n    skipClick = this.config.skipClick,\n    skipAutoClose = this.config.skipAutoClose,\n    initialSelectionStart,\n    initialSelectionEnd\n  } = {}) {\n    // TODO: properly type guard\n    // we use this workaround for now to prevent changing behavior\n    if (element.disabled) return;\n    if (!skipClick) {\n      yield this.click(element);\n    }\n    if (initialSelectionStart !== undefined) {\n      setSelectionRange(element, initialSelectionStart, initialSelectionEnd !== null && initialSelectionEnd !== void 0 ? initialSelectionEnd : initialSelectionStart);\n    }\n    yield this.keyboard(text);\n    if (!skipAutoClose) {\n      yield releaseAllKeys(this);\n    }\n  });\n  return _type.apply(this, arguments);\n}\nexport { type };","map":{"version":3,"names":["releaseAllKeys","setSelectionRange","type","_x","_x2","_type","apply","arguments","_asyncToGenerator","element","text","skipClick","config","skipAutoClose","initialSelectionStart","initialSelectionEnd","disabled","click","undefined","keyboard"],"sources":["C:/Users/drevo/Documents/GitHub/Crafts/TypeScript/Wordle/node_modules/@testing-library/user-event/dist/esm/utility/type.js"],"sourcesContent":["import { releaseAllKeys } from '../keyboard/index.js';\nimport '../utils/click/isClickableInput.js';\nimport '../utils/dataTransfer/Clipboard.js';\nimport '../utils/edit/isEditable.js';\nimport '../utils/edit/maxLength.js';\nimport '@testing-library/dom/dist/helpers.js';\nimport '../utils/keyDef/readNextDescriptor.js';\nimport '../utils/misc/level.js';\nimport '../options.js';\nimport { setSelectionRange } from '../event/selection/setSelectionRange.js';\n\nasync function type(element, text, { skipClick = this.config.skipClick, skipAutoClose = this.config.skipAutoClose, initialSelectionStart, initialSelectionEnd } = {}) {\n    // TODO: properly type guard\n    // we use this workaround for now to prevent changing behavior\n    if (element.disabled) return;\n    if (!skipClick) {\n        await this.click(element);\n    }\n    if (initialSelectionStart !== undefined) {\n        setSelectionRange(element, initialSelectionStart, initialSelectionEnd !== null && initialSelectionEnd !== void 0 ? initialSelectionEnd : initialSelectionStart);\n    }\n    await this.keyboard(text);\n    if (!skipAutoClose) {\n        await releaseAllKeys(this);\n    }\n}\n\nexport { type };\n"],"mappings":";AAAA,SAASA,cAAc,QAAQ,sBAAsB;AACrD,OAAO,oCAAoC;AAC3C,OAAO,oCAAoC;AAC3C,OAAO,6BAA6B;AACpC,OAAO,4BAA4B;AACnC,OAAO,sCAAsC;AAC7C,OAAO,uCAAuC;AAC9C,OAAO,wBAAwB;AAC/B,OAAO,eAAe;AACtB,SAASC,iBAAiB,QAAQ,yCAAyC;AAAC,SAE7DC,IAAIA,CAAAC,EAAA,EAAAC,GAAA;EAAA,OAAAC,KAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,MAAA;EAAAA,KAAA,GAAAG,iBAAA,CAAnB,WAAoBC,OAAO,EAAEC,IAAI,EAAE;IAAEC,SAAS,GAAG,IAAI,CAACC,MAAM,CAACD,SAAS;IAAEE,aAAa,GAAG,IAAI,CAACD,MAAM,CAACC,aAAa;IAAEC,qBAAqB;IAAEC;EAAoB,CAAC,GAAG,CAAC,CAAC,EAAE;IAClK;IACA;IACA,IAAIN,OAAO,CAACO,QAAQ,EAAE;IACtB,IAAI,CAACL,SAAS,EAAE;MACZ,MAAM,IAAI,CAACM,KAAK,CAACR,OAAO,CAAC;IAC7B;IACA,IAAIK,qBAAqB,KAAKI,SAAS,EAAE;MACrCjB,iBAAiB,CAACQ,OAAO,EAAEK,qBAAqB,EAAEC,mBAAmB,KAAK,IAAI,IAAIA,mBAAmB,KAAK,KAAK,CAAC,GAAGA,mBAAmB,GAAGD,qBAAqB,CAAC;IACnK;IACA,MAAM,IAAI,CAACK,QAAQ,CAACT,IAAI,CAAC;IACzB,IAAI,CAACG,aAAa,EAAE;MAChB,MAAMb,cAAc,CAAC,IAAI,CAAC;IAC9B;EACJ,CAAC;EAAA,OAAAK,KAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAED,SAASL,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}