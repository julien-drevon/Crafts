{"ast":null,"code":"import { dispatchDOMEvent } from '../event/dispatchEvent.js';\nimport '../utils/click/isClickableInput.js';\nimport '../utils/dataTransfer/Clipboard.js';\nimport '../utils/edit/isEditable.js';\nimport '../utils/edit/maxLength.js';\nimport { isElementType } from '../utils/misc/isElementType.js';\nimport '@testing-library/dom/dist/helpers.js';\nimport '../utils/keyDef/readNextDescriptor.js';\nimport '../utils/misc/level.js';\nimport '../options.js';\nimport { getInitialValue, clearInitialValue } from './UI.js';\nimport '@testing-library/dom';\nimport { prepareValueInterceptor, prepareSelectionInterceptor, prepareRangeTextInterceptor } from './interceptor.js';\nconst isPrepared = Symbol('Node prepared with document state workarounds');\nfunction prepareDocument(document) {\n  if (document[isPrepared]) {\n    return;\n  }\n  document.addEventListener('focus', e => {\n    const el = e.target;\n    prepareElement(el);\n  }, {\n    capture: true,\n    passive: true\n  });\n  // Our test environment defaults to `document.body` as `activeElement`.\n  // In other environments this might be `null` when preparing.\n  // istanbul ignore else\n  if (document.activeElement) {\n    prepareElement(document.activeElement);\n  }\n  document.addEventListener('blur', e => {\n    const el = e.target;\n    const initialValue = getInitialValue(el);\n    if (initialValue !== undefined) {\n      if (el.value !== initialValue) {\n        dispatchDOMEvent(el, 'change');\n      }\n      clearInitialValue(el);\n    }\n  }, {\n    capture: true,\n    passive: true\n  });\n  document[isPrepared] = isPrepared;\n}\nfunction prepareElement(el) {\n  if (el[isPrepared]) {\n    return;\n  }\n  if (isElementType(el, ['input', 'textarea'])) {\n    prepareValueInterceptor(el);\n    prepareSelectionInterceptor(el);\n    prepareRangeTextInterceptor(el);\n  }\n  el[isPrepared] = isPrepared;\n}\nexport { prepareDocument };","map":{"version":3,"names":["dispatchDOMEvent","isElementType","getInitialValue","clearInitialValue","prepareValueInterceptor","prepareSelectionInterceptor","prepareRangeTextInterceptor","isPrepared","Symbol","prepareDocument","document","addEventListener","e","el","target","prepareElement","capture","passive","activeElement","initialValue","undefined","value"],"sources":["C:/Users/drevo/Documents/GitHub/Crafts/TypeScript/Storybook/node_modules/@testing-library/user-event/dist/esm/document/prepareDocument.js"],"sourcesContent":["import { dispatchDOMEvent } from '../event/dispatchEvent.js';\nimport '../utils/click/isClickableInput.js';\nimport '../utils/dataTransfer/Clipboard.js';\nimport '../utils/edit/isEditable.js';\nimport '../utils/edit/maxLength.js';\nimport { isElementType } from '../utils/misc/isElementType.js';\nimport '@testing-library/dom/dist/helpers.js';\nimport '../utils/keyDef/readNextDescriptor.js';\nimport '../utils/misc/level.js';\nimport '../options.js';\nimport { getInitialValue, clearInitialValue } from './UI.js';\nimport '@testing-library/dom';\nimport { prepareValueInterceptor, prepareSelectionInterceptor, prepareRangeTextInterceptor } from './interceptor.js';\n\nconst isPrepared = Symbol('Node prepared with document state workarounds');\nfunction prepareDocument(document) {\n    if (document[isPrepared]) {\n        return;\n    }\n    document.addEventListener('focus', (e)=>{\n        const el = e.target;\n        prepareElement(el);\n    }, {\n        capture: true,\n        passive: true\n    });\n    // Our test environment defaults to `document.body` as `activeElement`.\n    // In other environments this might be `null` when preparing.\n    // istanbul ignore else\n    if (document.activeElement) {\n        prepareElement(document.activeElement);\n    }\n    document.addEventListener('blur', (e)=>{\n        const el = e.target;\n        const initialValue = getInitialValue(el);\n        if (initialValue !== undefined) {\n            if (el.value !== initialValue) {\n                dispatchDOMEvent(el, 'change');\n            }\n            clearInitialValue(el);\n        }\n    }, {\n        capture: true,\n        passive: true\n    });\n    document[isPrepared] = isPrepared;\n}\nfunction prepareElement(el) {\n    if (el[isPrepared]) {\n        return;\n    }\n    if (isElementType(el, [\n        'input',\n        'textarea'\n    ])) {\n        prepareValueInterceptor(el);\n        prepareSelectionInterceptor(el);\n        prepareRangeTextInterceptor(el);\n    }\n    el[isPrepared] = isPrepared;\n}\n\nexport { prepareDocument };\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,2BAA2B;AAC5D,OAAO,oCAAoC;AAC3C,OAAO,oCAAoC;AAC3C,OAAO,6BAA6B;AACpC,OAAO,4BAA4B;AACnC,SAASC,aAAa,QAAQ,gCAAgC;AAC9D,OAAO,sCAAsC;AAC7C,OAAO,uCAAuC;AAC9C,OAAO,wBAAwB;AAC/B,OAAO,eAAe;AACtB,SAASC,eAAe,EAAEC,iBAAiB,QAAQ,SAAS;AAC5D,OAAO,sBAAsB;AAC7B,SAASC,uBAAuB,EAAEC,2BAA2B,EAAEC,2BAA2B,QAAQ,kBAAkB;AAEpH,MAAMC,UAAU,GAAGC,MAAM,CAAC,+CAA+C,CAAC;AAC1E,SAASC,eAAeA,CAACC,QAAQ,EAAE;EAC/B,IAAIA,QAAQ,CAACH,UAAU,CAAC,EAAE;IACtB;EACJ;EACAG,QAAQ,CAACC,gBAAgB,CAAC,OAAO,EAAGC,CAAC,IAAG;IACpC,MAAMC,EAAE,GAAGD,CAAC,CAACE,MAAM;IACnBC,cAAc,CAACF,EAAE,CAAC;EACtB,CAAC,EAAE;IACCG,OAAO,EAAE,IAAI;IACbC,OAAO,EAAE;EACb,CAAC,CAAC;EACF;EACA;EACA;EACA,IAAIP,QAAQ,CAACQ,aAAa,EAAE;IACxBH,cAAc,CAACL,QAAQ,CAACQ,aAAa,CAAC;EAC1C;EACAR,QAAQ,CAACC,gBAAgB,CAAC,MAAM,EAAGC,CAAC,IAAG;IACnC,MAAMC,EAAE,GAAGD,CAAC,CAACE,MAAM;IACnB,MAAMK,YAAY,GAAGjB,eAAe,CAACW,EAAE,CAAC;IACxC,IAAIM,YAAY,KAAKC,SAAS,EAAE;MAC5B,IAAIP,EAAE,CAACQ,KAAK,KAAKF,YAAY,EAAE;QAC3BnB,gBAAgB,CAACa,EAAE,EAAE,QAAQ,CAAC;MAClC;MACAV,iBAAiB,CAACU,EAAE,CAAC;IACzB;EACJ,CAAC,EAAE;IACCG,OAAO,EAAE,IAAI;IACbC,OAAO,EAAE;EACb,CAAC,CAAC;EACFP,QAAQ,CAACH,UAAU,CAAC,GAAGA,UAAU;AACrC;AACA,SAASQ,cAAcA,CAACF,EAAE,EAAE;EACxB,IAAIA,EAAE,CAACN,UAAU,CAAC,EAAE;IAChB;EACJ;EACA,IAAIN,aAAa,CAACY,EAAE,EAAE,CAClB,OAAO,EACP,UAAU,CACb,CAAC,EAAE;IACAT,uBAAuB,CAACS,EAAE,CAAC;IAC3BR,2BAA2B,CAACQ,EAAE,CAAC;IAC/BP,2BAA2B,CAACO,EAAE,CAAC;EACnC;EACAA,EAAE,CAACN,UAAU,CAAC,GAAGA,UAAU;AAC/B;AAEA,SAASE,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}